
package com.common.lib.widget;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.LinearLayout;

import com.common.lib.R;

public class SlideItemView extends LinearLayout {

    // 最大允许滑动的距离
    private int mMaxDistance;
    // 每次滑动的起始坐标
    private int mFromX;
    // 视图停留的前一个x坐标
    private int mOriX;
    // 当前视图移动多远距离了
    private int mDistance;
    // 是否是滑动模式
    private boolean mIsSlide;

    public SlideItemView(Context context, AttributeSet attrs) {
        super(context, attrs);

        TypedArray typedArray = context.obtainStyledAttributes(attrs,
                R.styleable.SlideItemView);
        mMaxDistance = typedArray.getDimensionPixelSize(R.styleable.SlideItemView_slide_size, 0);
        typedArray.recycle();

        // 必须有这一句，否则在使用的地方没有setOnClickListener的情况下，无法滑动
        setOnClickListener(null);
    }

    @SuppressLint("ClickableViewAccessibility")
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        final int action = event.getAction();
        // CommonLog.i("action:%1$d %2$d -> %3$d", action, mOriX, (int) event.getX());
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mOriX = (int) event.getX();
                mFromX = mDistance;
                break;
            case MotionEvent.ACTION_MOVE:
                if (mOriX == 0) {
                    mOriX = (int) event.getX();
                } else {
                    int x = (int) event.getX();
                    int deltaX = mOriX - x;
                    if (deltaX == 0) {
                        break;
                    }
                    // 修正移动距离，防止滑动超出左右边距限制
                    if (mDistance + deltaX > mMaxDistance) {
                        deltaX = mMaxDistance - mDistance;
                    } else if (mDistance + deltaX < 0) {
                        deltaX = 0 - mDistance;
                    }
                    mOriX = x;
                    mIsSlide = true;

                    // CommonLog.i("mMaxDistance:%1$d mDistance:%2$d", mMaxDistance, mDistance);
                    if (mDistance <= mMaxDistance && mDistance >= 0) {
                        // 手指拖动itemView滚动, deltaX大于0向左滚动，小于0向右滚
                        scrollBy(deltaX, 0);
                        mDistance += deltaX;
                    }
                }
                return true;
            default: // MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL
                if (mIsSlide) {
                    boolean isHandled = false;
                 // 防止点击时手指抖动，造成不好点击的效果
                    if(Math.abs(mDistance - mFromX) > 20) {
                        isHandled = true;
                    }
                    if (mDistance != 0 || mDistance != mMaxDistance) {
                        int deltaX;
                        if (mDistance < mMaxDistance / 2) {// 滑动不足一半，松手后回弹回去
                            deltaX = 0 - mDistance;
                            mDistance = 0;
                        } else {// 滑动超过一半，松手后展开全部
                            deltaX = mMaxDistance - mDistance;
                            mDistance = mMaxDistance;
                        }
                        scrollBy(deltaX, 0);
                    }
                    mIsSlide = false;
                    if(isHandled) {
                        return true;
                    }
                }
                break;
        }

        // 否则直接交给父控件来处理onTouchEvent事件
        return super.onTouchEvent(event);
    }

    public void reset(){
        scrollBy(-mMaxDistance, 0);
        mDistance = 0;
    }
    
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec + mMaxDistance, heightMeasureSpec);
    }
}
